// Generated by Haxe 4.1.4
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class EReg {
	constructor(r,opt) {
		this.r = new RegExp(r,opt.split("u").join(""));
	}
	match(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	matched(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
}
EReg.__name__ = true;
Object.assign(EReg.prototype, {
	__class__: EReg
	,r: null
});
class HxOverrides {
	static dateStr(date) {
		let m = date.getMonth() + 1;
		let d = date.getDate();
		let h = date.getHours();
		let mi = date.getMinutes();
		let s = date.getSeconds();
		return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
	}
	static cca(s,index) {
		let x = s.charCodeAt(index);
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static now() {
		return Date.now();
	}
}
HxOverrides.__name__ = true;
Math.__name__ = true;
class Reflect {
	static field(o,field) {
		try {
			return o[field];
		} catch( _g ) {
			return null;
		}
	}
	static fields(o) {
		let a = [];
		if(o != null) {
			let hasOwnProperty = Object.prototype.hasOwnProperty;
			for( var f in o ) {
			if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
				a.push(f);
			}
			}
		}
		return a;
	}
	static isFunction(f) {
		if(typeof(f) == "function") {
			return !(f.__name__ || f.__ename__);
		} else {
			return false;
		}
	}
}
Reflect.__name__ = true;
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
	static parseInt(x) {
		if(x != null) {
			let _g = 0;
			let _g1 = x.length;
			while(_g < _g1) {
				let i = _g++;
				let c = x.charCodeAt(i);
				if(c <= 8 || c >= 14 && c != 32 && c != 45) {
					let nc = x.charCodeAt(i + 1);
					let v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
					if(isNaN(v)) {
						return null;
					} else {
						return v;
					}
				}
			}
		}
		return null;
	}
}
Std.__name__ = true;
class StringBuf {
	constructor() {
		this.b = "";
	}
}
StringBuf.__name__ = true;
Object.assign(StringBuf.prototype, {
	__class__: StringBuf
	,b: null
});
class StringTools {
	static startsWith(s,start) {
		if(s.length >= start.length) {
			return s.lastIndexOf(start,0) == 0;
		} else {
			return false;
		}
	}
	static isSpace(s,pos) {
		let c = HxOverrides.cca(s,pos);
		if(!(c > 8 && c < 14)) {
			return c == 32;
		} else {
			return true;
		}
	}
	static ltrim(s) {
		let l = s.length;
		let r = 0;
		while(r < l && StringTools.isSpace(s,r)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,r,l - r);
		} else {
			return s;
		}
	}
	static rtrim(s) {
		let l = s.length;
		let r = 0;
		while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,0,l - r);
		} else {
			return s;
		}
	}
	static trim(s) {
		return StringTools.ltrim(StringTools.rtrim(s));
	}
	static lpad(s,c,l) {
		if(c.length <= 0) {
			return s;
		}
		let buf_b = "";
		l -= s.length;
		while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
		buf_b += s == null ? "null" : "" + s;
		return buf_b;
	}
	static replace(s,sub,by) {
		return s.split(sub).join(by);
	}
}
StringTools.__name__ = true;
class haxe_io_Input {
	readByte() {
		throw haxe_Exception.thrown("Not implemented");
	}
	readBytes(s,pos,len) {
		let k = len;
		let b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	readFullBytes(s,pos,len) {
		while(len > 0) {
			let k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	readLine() {
		let buf = new haxe_io_BytesBuffer();
		let last;
		let s;
		try {
			while(true) {
				last = this.readByte();
				if(!(last != 10)) {
					break;
				}
				buf.addByte(last);
			}
			s = buf.getBytes().toString();
			if(HxOverrides.cca(s,s.length - 1) == 13) {
				s = HxOverrides.substr(s,0,-1);
			}
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof haxe_io_Eof)) {
				let e = _g1;
				s = buf.getBytes().toString();
				if(s.length == 0) {
					throw haxe_Exception.thrown(e);
				}
			} else {
				throw _g;
			}
		}
		return s;
	}
	readString(len,encoding) {
		let b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
}
haxe_io_Input.__name__ = true;
Object.assign(haxe_io_Input.prototype, {
	__class__: haxe_io_Input
});
var ValueType = $hxEnums["ValueType"] = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
class Type {
	static getInstanceFields(c) {
		let result = [];
		while(c != null) {
			let _g = 0;
			let _g1 = Object.getOwnPropertyNames(c.prototype);
			while(_g < _g1.length) {
				let name = _g1[_g];
				++_g;
				switch(name) {
				case "__class__":case "__properties__":case "constructor":
					break;
				default:
					if(result.indexOf(name) == -1) {
						result.push(name);
					}
				}
			}
			c = c.__super__;
		}
		return result;
	}
	static typeof(v) {
		switch(typeof(v)) {
		case "boolean":
			return ValueType.TBool;
		case "function":
			if(v.__name__ || v.__ename__) {
				return ValueType.TObject;
			}
			return ValueType.TFunction;
		case "number":
			if(Math.ceil(v) == v % 2147483648.0) {
				return ValueType.TInt;
			}
			return ValueType.TFloat;
		case "object":
			if(v == null) {
				return ValueType.TNull;
			}
			let e = v.__enum__;
			if(e != null) {
				return ValueType.TEnum($hxEnums[e]);
			}
			let c = js_Boot.getClass(v);
			if(c != null) {
				return ValueType.TClass(c);
			}
			return ValueType.TObject;
		case "string":
			return ValueType.TClass(String);
		case "undefined":
			return ValueType.TNull;
		default:
			return ValueType.TUnknown;
		}
	}
}
Type.__name__ = true;
class gmdebug_ComposeTools {
	static compose(req,str,body) {
		let response = new gmdebug_ComposedResponse(req,body);
		response.success = true;
		return response;
	}
	static composeFail(req,rawerror,error) {
		let response = new gmdebug_ComposedResponse(req,error);
		response.message = rawerror;
		response.success = false;
		return response;
	}
}
gmdebug_ComposeTools.__name__ = true;
class gmdebug_ComposedProtocolMessage {
	constructor(_type) {
		if(gmdebug_ComposedProtocolMessage._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(_type);
	}
	_hx_constructor(_type) {
		this.type = _type;
	}
}
gmdebug_ComposedProtocolMessage.__name__ = true;
Object.assign(gmdebug_ComposedProtocolMessage.prototype, {
	__class__: gmdebug_ComposedProtocolMessage
	,type: null
});
class gmdebug_ComposedEvent extends gmdebug_ComposedProtocolMessage {
	constructor(str,body) {
		super("event");
		this.event = str;
		this.body = body;
	}
}
gmdebug_ComposedEvent.__name__ = true;
gmdebug_ComposedEvent.__super__ = gmdebug_ComposedProtocolMessage;
Object.assign(gmdebug_ComposedEvent.prototype, {
	__class__: gmdebug_ComposedEvent
	,event: null
	,body: null
});
class gmdebug_ComposedRequest extends gmdebug_ComposedProtocolMessage {
	constructor(str,args) {
		super("request");
		this.command = str;
	}
}
gmdebug_ComposedRequest.__name__ = true;
gmdebug_ComposedRequest.__super__ = gmdebug_ComposedProtocolMessage;
Object.assign(gmdebug_ComposedRequest.prototype, {
	__class__: gmdebug_ComposedRequest
	,command: null
});
class gmdebug_ComposedResponse extends gmdebug_ComposedProtocolMessage {
	constructor(req,body) {
		gmdebug_ComposedProtocolMessage._hx_skip_constructor = true;
		super();
		gmdebug_ComposedProtocolMessage._hx_skip_constructor = false;
		this._hx_constructor(req,body);
	}
	_hx_constructor(req,body) {
		this.success = true;
		super._hx_constructor("response");
		this.request_seq = req.seq;
		this.command = req.command;
		this.body = body;
	}
}
gmdebug_ComposedResponse.__name__ = true;
gmdebug_ComposedResponse.__super__ = gmdebug_ComposedProtocolMessage;
Object.assign(gmdebug_ComposedResponse.prototype, {
	__class__: gmdebug_ComposedResponse
	,request_seq: null
	,success: null
	,command: null
	,message: null
	,body: null
});
class gmdebug_ComposedGmDebugMessage extends gmdebug_ComposedProtocolMessage {
	constructor(msg,body) {
		super("gmdebug");
		this.msg = msg;
		this.body = body;
	}
}
gmdebug_ComposedGmDebugMessage.__name__ = true;
gmdebug_ComposedGmDebugMessage.__super__ = gmdebug_ComposedProtocolMessage;
Object.assign(gmdebug_ComposedGmDebugMessage.prototype, {
	__class__: gmdebug_ComposedGmDebugMessage
	,msg: null
	,body: null
});
class haxe_io_Path {
	constructor(path) {
		switch(path) {
		case ".":case "..":
			this.dir = path;
			this.file = "";
			return;
		}
		let c1 = path.lastIndexOf("/");
		let c2 = path.lastIndexOf("\\");
		if(c1 < c2) {
			this.dir = HxOverrides.substr(path,0,c2);
			path = HxOverrides.substr(path,c2 + 1,null);
			this.backslash = true;
		} else if(c2 < c1) {
			this.dir = HxOverrides.substr(path,0,c1);
			path = HxOverrides.substr(path,c1 + 1,null);
		} else {
			this.dir = null;
		}
		let cp = path.lastIndexOf(".");
		if(cp != -1) {
			this.ext = HxOverrides.substr(path,cp + 1,null);
			this.file = HxOverrides.substr(path,0,cp);
		} else {
			this.ext = null;
			this.file = path;
		}
	}
	static directory(path) {
		let s = new haxe_io_Path(path);
		if(s.dir == null) {
			return "";
		}
		return s.dir;
	}
	static join(paths) {
		let _g = [];
		let _g1 = 0;
		while(_g1 < paths.length) {
			let v = paths[_g1];
			++_g1;
			if(v != null && v != "") {
				_g.push(v);
			}
		}
		if(_g.length == 0) {
			return "";
		}
		let path = _g[0];
		let _g2 = 1;
		let _g3 = _g.length;
		while(_g2 < _g3) {
			let i = _g2++;
			path = haxe_io_Path.addTrailingSlash(path);
			path += _g[i];
		}
		return haxe_io_Path.normalize(path);
	}
	static normalize(path) {
		let slash = "/";
		path = path.split("\\").join(slash);
		if(path == slash) {
			return slash;
		}
		let target = [];
		let _g = 0;
		let _g1 = path.split(slash);
		while(_g < _g1.length) {
			let token = _g1[_g];
			++_g;
			if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
				target.pop();
			} else if(token == "") {
				if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
					target.push(token);
				}
			} else if(token != ".") {
				target.push(token);
			}
		}
		let tmp = target.join(slash);
		let acc_b = "";
		let colon = false;
		let slashes = false;
		let _g2_offset = 0;
		let _g2_s = tmp;
		while(_g2_offset < _g2_s.length) {
			let s = _g2_s;
			let index = _g2_offset++;
			let c = s.charCodeAt(index);
			if(c >= 55296 && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
			}
			let c1 = c;
			if(c1 >= 65536) {
				++_g2_offset;
			}
			let c2 = c1;
			switch(c2) {
			case 47:
				if(!colon) {
					slashes = true;
				} else {
					let i = c2;
					colon = false;
					if(slashes) {
						acc_b += "/";
						slashes = false;
					}
					acc_b += String.fromCodePoint(i);
				}
				break;
			case 58:
				acc_b += ":";
				colon = true;
				break;
			default:
				let i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
		}
		return acc_b;
	}
	static addTrailingSlash(path) {
		if(path.length == 0) {
			return "/";
		}
		let c1 = path.lastIndexOf("/");
		let c2 = path.lastIndexOf("\\");
		if(c1 < c2) {
			if(c2 != path.length - 1) {
				return path + "\\";
			} else {
				return path;
			}
		} else if(c1 != path.length - 1) {
			return path + "/";
		} else {
			return path;
		}
	}
	static isAbsolute(path) {
		if(StringTools.startsWith(path,"/")) {
			return true;
		}
		if(path.charAt(1) == ":") {
			return true;
		}
		if(StringTools.startsWith(path,"\\\\")) {
			return true;
		}
		return false;
	}
}
haxe_io_Path.__name__ = true;
Object.assign(haxe_io_Path.prototype, {
	__class__: haxe_io_Path
	,dir: null
	,file: null
	,ext: null
	,backslash: null
});
class gmdebug_Cross {
	static readHeader(x) {
		let content_length = x.readLine();
		let skip = 0;
		let _g = 0;
		let _g1 = content_length.length;
		while(_g < _g1) {
			let i = _g++;
			if(HxOverrides.cca(content_length,i) == 4) {
				++skip;
			} else {
				break;
			}
		}
		if(skip > 0) {
			content_length = HxOverrides.substr(content_length,skip,null);
		}
		let content_length1 = Std.parseInt(HxOverrides.substr(content_length,15,null));
		x.readLine();
		return content_length1;
	}
}
gmdebug_Cross.__name__ = true;
var gmdebug_CommMethod = $hxEnums["gmdebug.CommMethod"] = { __ename__ : true, __constructs__ : ["Pipe","Socket"]
	,Pipe: {_hx_index:0,__enum__:"gmdebug.CommMethod",toString:$estr}
	,Socket: {_hx_index:1,__enum__:"gmdebug.CommMethod",toString:$estr}
};
class gmdebug_FrameID {
	static getValue(this1) {
		let clientID = this1 >>> 27;
		let actualFrame = this1 & 134217727;
		return { clientID : clientID, actualFrame : actualFrame};
	}
}
var gmdebug_VariableReferenceVal = $hxEnums["gmdebug.VariableReferenceVal"] = { __ename__ : true, __constructs__ : ["Child","FrameLocal","Global"]
	,Child: ($_=function(clientID,ref) { return {_hx_index:0,clientID:clientID,ref:ref,__enum__:"gmdebug.VariableReferenceVal",toString:$estr}; },$_.__params__ = ["clientID","ref"],$_)
	,FrameLocal: ($_=function(clientID,frameID,ref) { return {_hx_index:1,clientID:clientID,frameID:frameID,ref:ref,__enum__:"gmdebug.VariableReferenceVal",toString:$estr}; },$_.__params__ = ["clientID","frameID","ref"],$_)
	,Global: ($_=function(clientID,ref) { return {_hx_index:2,clientID:clientID,ref:ref,__enum__:"gmdebug.VariableReferenceVal",toString:$estr}; },$_.__params__ = ["clientID","ref"],$_)
};
class gmdebug_VariableReference {
	static getValue(this1) {
		let clientID = this1 >>> 25 & 15;
		let ref = this1 >>> 29 & 3;
		switch(ref) {
		case 0:
			return gmdebug_VariableReferenceVal.Child(clientID,this1 & 16777215);
		case 1:
			return gmdebug_VariableReferenceVal.FrameLocal(clientID,this1 >>> 18 & 127,this1 & 262143);
		case 2:
			return gmdebug_VariableReferenceVal.Global(clientID,this1 & 16777215);
		}
	}
}
class gmdebug_dap_BytesProcessor {
	constructor() {
		this.lastGoodPos = 0;
		this.prevBytes = [];
		this.prevClientResults = [];
		this.fillRequested = false;
	}
	process(jsBuf,clientNo) {
		this.fillRequested = false;
		let bytes = js_node_buffer__$Buffer_Helper.bytesOfBuffer(jsBuf);
		bytes = this.conjoinHandle(bytes,clientNo);
		return this.processBytes(bytes,clientNo);
	}
	processBytes(rawBytes,clientNo) {
		let input = new haxe_io_BytesInput(rawBytes);
		try {
			return this.addMessages(input,clientNo);
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g);
			let _g2 = _g1.unwrap();
			if(((_g2) instanceof haxe_io_Eof)) {
				this.lastGoodPos = input.pos;
				this.prevClientResults[clientNo] = null;
				this.prevBytes[clientNo] = rawBytes.sub(this.lastGoodPos,rawBytes.length - this.lastGoodPos);
				return [];
			} else if(typeof(_g2) == "string") {
				let e = _g2;
				this.lastGoodPos = input.pos;
				this.prevClientResults[clientNo] = null;
				this.prevBytes[clientNo] = rawBytes.sub(this.lastGoodPos,rawBytes.length - this.lastGoodPos);
				haxe_Log.trace(e,{ fileName : "src/gmdebug/dap/BytesProcessor.hx", lineNumber : 42, className : "gmdebug.dap.BytesProcessor", methodName : "processBytes"});
				return [];
			} else {
				throw haxe_Exception.thrown(_g1);
			}
		}
	}
	addMessages(inp,clientNo) {
		let messages = [];
		while(inp.pos != inp.totlen && this.skipAcks(inp)) {
			let prevResult = this.prevClientResults[clientNo];
			let result;
			if(prevResult == null) {
				result = this.recvMessage(inp);
			} else {
				switch(prevResult._hx_index) {
				case 0:
					result = this.recvMessage(inp);
					break;
				case 1:
					result = this.recvMessage(inp,prevResult.remaining);
					break;
				}
			}
			let tmp = this.prevClientResults;
			let tmp1;
			if(prevResult == null) {
				switch(result._hx_index) {
				case 0:
					messages.push(new haxe_format_JsonParser(result.x).doParse());
					tmp1 = result;
					break;
				case 1:
					tmp1 = result;
					break;
				}
			} else if(prevResult._hx_index == 1) {
				let _g = prevResult.x;
				switch(result._hx_index) {
				case 0:
					messages.push(new haxe_format_JsonParser(_g + result.x).doParse());
					tmp1 = result;
					break;
				case 1:
					tmp1 = gmdebug_dap_RecvMessageResponse.Unfinished(_g + result.x,result.remaining);
					break;
				}
			} else {
				switch(result._hx_index) {
				case 0:
					messages.push(new haxe_format_JsonParser(result.x).doParse());
					tmp1 = result;
					break;
				case 1:
					tmp1 = result;
					break;
				}
			}
			tmp[clientNo] = tmp1;
		}
		return messages;
	}
	conjoinHandle(curBytes,clientNo) {
		let oldByte = this.prevBytes[clientNo];
		if(oldByte != null) {
			let conjoinedBytes = new haxe_io_Bytes(new ArrayBuffer(oldByte.length + curBytes.length));
			conjoinedBytes.blit(0,oldByte,0,oldByte.length);
			conjoinedBytes.blit(oldByte.length,curBytes,0,curBytes.length);
			this.prevBytes[clientNo] = null;
			return conjoinedBytes;
		} else {
			return curBytes;
		}
	}
	recvMessage(input,remaining) {
		if(remaining == null) {
			remaining = gmdebug_Cross.readHeader(input);
		}
		let bufRemaining = input.totlen - input.pos;
		if(remaining > bufRemaining) {
			let str = input.readString(bufRemaining,haxe_io_Encoding.UTF8);
			remaining -= bufRemaining;
			return gmdebug_dap_RecvMessageResponse.Unfinished(str,remaining);
		} else {
			let str = input.readString(remaining,haxe_io_Encoding.UTF8);
			return gmdebug_dap_RecvMessageResponse.Completed(str);
		}
	}
	skipAcks(inp) {
		let _g = inp.pos;
		let _g1 = inp.totlen;
		while(_g < _g1) {
			++_g;
			let byt = inp.readByte();
			if(byt != 4) {
				inp.set_position(inp.pos - 1);
				return true;
			} else {
				this.fillRequested = true;
			}
		}
		return false;
	}
}
gmdebug_dap_BytesProcessor.__name__ = true;
Object.assign(gmdebug_dap_BytesProcessor.prototype, {
	__class__: gmdebug_dap_BytesProcessor
	,fillRequested: null
	,prevClientResults: null
	,prevBytes: null
	,lastGoodPos: null
});
var gmdebug_dap_RecvMessageResponse = $hxEnums["gmdebug.dap.RecvMessageResponse"] = { __ename__ : true, __constructs__ : ["Completed","Unfinished"]
	,Completed: ($_=function(x) { return {_hx_index:0,x:x,__enum__:"gmdebug.dap.RecvMessageResponse",toString:$estr}; },$_.__params__ = ["x"],$_)
	,Unfinished: ($_=function(x,remaining) { return {_hx_index:1,x:x,remaining:remaining,__enum__:"gmdebug.dap.RecvMessageResponse",toString:$estr}; },$_.__params__ = ["x","remaining"],$_)
};
class gmdebug_dap_Handlers {
	static handle(req) {
		let command = req.command;
		switch(command) {
		case "attach":
			gmdebug_dap_Handlers.h_attach(req);
			break;
		case "configurationDone":
			let tmp = gmdebug_dap_LuaDebugger.clients[0].writeS;
			haxe_Log.trace("composing message",{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 316, className : "gmdebug.dap.LuaDebugger", methodName : "composeMessage"});
			let json = haxe_format_JsonPrinter.print(req,null,null);
			let len = haxe_io_Bytes.ofString(json).length;
			tmp.write("Content-Length: " + len + "\r\n\r\n" + json);
			break;
		case "disconnect":
			gmdebug_dap_Handlers.h_disconnect(req);
			break;
		case "evaluate":
			gmdebug_dap_Handlers.h_evaluate(req);
			break;
		case "_continue":case "breakpointLocations":case "goto":case "gotoTargets":case "loadedSources":case "modules":
			let tmp1 = gmdebug_dap_LuaDebugger.clients[0].writeS;
			haxe_Log.trace("composing message",{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 316, className : "gmdebug.dap.LuaDebugger", methodName : "composeMessage"});
			let json1 = haxe_format_JsonPrinter.print(req,null,null);
			let len1 = haxe_io_Bytes.ofString(json1).length;
			tmp1.write("Content-Length: " + len1 + "\r\n\r\n" + json1);
			break;
		case "initialize":
			gmdebug_dap_Handlers.h_initialize(req);
			break;
		case "launch":
			gmdebug_dap_Handlers.h_launch(req);
			break;
		case "scopes":
			gmdebug_dap_Handlers.h_scopes(req);
			break;
		case "setBreakpoints":
			gmdebug_dap_Handlers.h_setBreakpoints(req);
			break;
		case "setExceptionBreakpoints":
			gmdebug_dap_Handlers.h_setExceptionBreakpoints(req);
			break;
		case "setFunctionBreakpoints":
			gmdebug_dap_Handlers.h_setFunctionBreakpoints(req);
			break;
		case "continue":case "next":case "pause":case "stackTrace":case "stepIn":case "stepOut":
			let id = req.arguments.threadId;
			let tmp2 = gmdebug_dap_LuaDebugger.clients[id].writeS;
			haxe_Log.trace("composing message",{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 316, className : "gmdebug.dap.LuaDebugger", methodName : "composeMessage"});
			let json2 = haxe_format_JsonPrinter.print(req,null,null);
			let len2 = haxe_io_Bytes.ofString(json2).length;
			tmp2.write("Content-Length: " + len2 + "\r\n\r\n" + json2);
			break;
		case "threads":
			gmdebug_dap_Handlers.h_threads(req);
			break;
		case "variables":
			gmdebug_dap_Handlers.h_variables(req);
			break;
		}
	}
	static sendAll(x) {
		haxe_Log.trace("composing message",{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 316, className : "gmdebug.dap.LuaDebugger", methodName : "composeMessage"});
		let json = haxe_format_JsonPrinter.print(x,null,null);
		let len = haxe_io_Bytes.ofString(json).length;
		let msg = "Content-Length: " + len + "\r\n\r\n" + json;
		let _g = 0;
		let _g1 = gmdebug_dap_LuaDebugger.clients;
		while(_g < _g1.length) {
			let client = _g1[_g];
			++_g;
			client.writeS.write(msg);
		}
	}
	static h_setBreakpoints(x) {
		gmdebug_dap_Handlers.latestBreakpoint = x;
		gmdebug_dap_Handlers.sendAll(x);
	}
	static h_threads(x) {
		let threadArr = [{ name : "Server", id : 0}];
		let _g = 1;
		let _g1 = gmdebug_dap_LuaDebugger.clients.length;
		while(_g < _g1) {
			let i = _g++;
			threadArr.push({ name : gmdebug_dap_LuaDebugger.mapClientName.h[i], id : i});
		}
		let _this = gmdebug_ComposeTools.compose(x,"threads",{ threads : threadArr});
		haxe_Log.trace("sending from dap " + _this.command,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 131, className : "gmdebug.ComposedResponse", methodName : "send"});
		gmdebug_dap_LuaDebugger.inst.sendResponse(_this);
	}
	static h_setExceptionBreakpoints(x) {
		gmdebug_dap_Handlers.latestExceptionBP = x;
		gmdebug_dap_Handlers.sendAll(x);
	}
	static h_disconnect(x) {
		gmdebug_dap_Handlers.sendAll(x);
		let _this = gmdebug_ComposeTools.compose(x,"disconnect");
		haxe_Log.trace("sending from dap " + _this.command,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 131, className : "gmdebug.ComposedResponse", methodName : "send"});
		gmdebug_dap_LuaDebugger.inst.sendResponse(_this);
		gmdebug_dap_LuaDebugger.inst.shutdown();
	}
	static h_setFunctionBreakpoints(x) {
		gmdebug_dap_Handlers.latestFunctionBP = x;
		gmdebug_dap_Handlers.sendAll(x);
	}
	static h_variables(x) {
		let ref = x.arguments.variablesReference;
		if(ref <= 0) {
			haxe_Log.trace("invalid variable reference",{ fileName : "src/gmdebug/dap/Handlers.hx", lineNumber : 105, className : "gmdebug.dap.Handlers", methodName : "h_variables"});
			let _this = gmdebug_ComposeTools.compose(x,"variables",{ variables : []});
			haxe_Log.trace("sending from dap " + _this.command,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 131, className : "gmdebug.ComposedResponse", methodName : "send"});
			gmdebug_dap_LuaDebugger.inst.sendResponse(_this);
			return;
		}
		let _g = gmdebug_VariableReference.getValue(ref);
		switch(_g._hx_index) {
		case 0:
			let tmp = gmdebug_dap_LuaDebugger.clients[_g.clientID].writeS;
			haxe_Log.trace("composing message",{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 316, className : "gmdebug.dap.LuaDebugger", methodName : "composeMessage"});
			let json = haxe_format_JsonPrinter.print(x,null,null);
			let len = haxe_io_Bytes.ofString(json).length;
			tmp.write("Content-Length: " + len + "\r\n\r\n" + json);
			break;
		case 1:
			let tmp1 = gmdebug_dap_LuaDebugger.clients[_g.clientID].writeS;
			haxe_Log.trace("composing message",{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 316, className : "gmdebug.dap.LuaDebugger", methodName : "composeMessage"});
			let json1 = haxe_format_JsonPrinter.print(x,null,null);
			let len1 = haxe_io_Bytes.ofString(json1).length;
			tmp1.write("Content-Length: " + len1 + "\r\n\r\n" + json1);
			break;
		case 2:
			let tmp2 = gmdebug_dap_LuaDebugger.clients[_g.clientID].writeS;
			haxe_Log.trace("composing message",{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 316, className : "gmdebug.dap.LuaDebugger", methodName : "composeMessage"});
			let json2 = haxe_format_JsonPrinter.print(x,null,null);
			let len2 = haxe_io_Bytes.ofString(json2).length;
			tmp2.write("Content-Length: " + len2 + "\r\n\r\n" + json2);
			break;
		}
	}
	static h_evaluate(x) {
		let expr = x.arguments.expression;
		if(expr.charAt(0) == "/") {
			let _g = gmdebug_dap_LuaDebugger.dapMode;
			if(_g._hx_index == 1) {
				let actual = HxOverrides.substr(expr,1,null);
				_g.child.stdin.write(actual + "\n");
				let _this = gmdebug_ComposeTools.compose(x,"evaluate",{ result : "", variablesReference : 0});
				haxe_Log.trace("sending from dap " + _this.command,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 131, className : "gmdebug.ComposedResponse", methodName : "send"});
				gmdebug_dap_LuaDebugger.inst.sendResponse(_this);
				return;
			}
		}
		let _g = x.arguments.frameId;
		let client = _g == null ? 0 : gmdebug_FrameID.getValue(_g).clientID;
		let tmp = gmdebug_dap_LuaDebugger.clients[client].writeS;
		haxe_Log.trace("composing message",{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 316, className : "gmdebug.dap.LuaDebugger", methodName : "composeMessage"});
		let json = haxe_format_JsonPrinter.print(x,null,null);
		let len = haxe_io_Bytes.ofString(json).length;
		tmp.write("Content-Length: " + len + "\r\n\r\n" + json);
	}
	static h_initialize(x) {
		let response = { seq : 0, request_seq : x.seq, command : "initialize", type : "response", body : { }, success : true};
		response.body.supportsConfigurationDoneRequest = true;
		response.body.supportsFunctionBreakpoints = true;
		response.body.supportsConditionalBreakpoints = true;
		response.body.supportsEvaluateForHovers = true;
		response.body.supportsLoadedSourcesRequest = true;
		response.body.supportsFunctionBreakpoints = true;
		response.body.supportsBreakpointLocationsRequest = false;
		gmdebug_dap_LuaDebugger.inst.sendResponse(response);
	}
	static h_launch(x) {
		let serverFolder = x.arguments.serverFolder;
		if(!gmdebug_dap_Handlers.validateServerFolder(serverFolder,x)) {
			return;
		}
		let programPath;
		let _g = x.arguments.programPath;
		if(_g == null) {
			let _this = gmdebug_ComposeTools.composeFail(x,"Gmdebug requires the property \"programPath\" to be specified when launching.",{ id : 2, format : "Gmdebug requires the property \"programPath\" to be specified when launching"});
			haxe_Log.trace("sending from dap " + _this.command,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 131, className : "gmdebug.ComposedResponse", methodName : "send"});
			gmdebug_dap_LuaDebugger.inst.sendResponse(_this);
			return;
		} else {
			programPath = _g == "auto" ? "" + serverFolder + "/../srcds_run" : _g;
		}
		if(!gmdebug_dap_Handlers.validateProgramPath(programPath,x)) {
			return;
		}
		let value = x.arguments.programArgs;
		let arrArgs = value == null ? [] : value;
		let argResult = "";
		let _g1 = 0;
		while(_g1 < arrArgs.length) {
			let arg = arrArgs[_g1];
			++_g1;
			argResult += arg + " ";
		}
		let childProcess = js_node_ChildProcess.spawn("script -c '" + programPath + " -norestart " + argResult + "' /dev/null",{ cwd : haxe_io_Path.directory(programPath), env : process.env, shell : true});
		childProcess.stdout.on("data",function(str) {
			let _this = new gmdebug_ComposedEvent("output",{ category : "stdout", output : StringTools.replace(str.toString(),"\r",""), data : null});
			haxe_Log.trace("sending from dap " + _this.event,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 59, className : "gmdebug.ComposedEvent", methodName : "send"});
			gmdebug_dap_LuaDebugger.inst.sendEvent(_this);
		});
		childProcess.stderr.on("data",function(str) {
			let _this = new gmdebug_ComposedEvent("output",{ category : "stdout", output : str.toString(), data : null});
			haxe_Log.trace("sending from dap " + _this.event,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 59, className : "gmdebug.ComposedEvent", methodName : "send"});
			gmdebug_dap_LuaDebugger.inst.sendEvent(_this);
		});
		childProcess.on("error",function(err) {
			let _this = new gmdebug_ComposedEvent("output",{ category : "stderr", output : err.message + "\n" + err.stack, data : null});
			haxe_Log.trace("sending from dap " + _this.event,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 59, className : "gmdebug.ComposedEvent", methodName : "send"});
			gmdebug_dap_LuaDebugger.inst.sendEvent(_this);
			haxe_Log.trace("Child process error///",{ fileName : "src/gmdebug/dap/Handlers.hx", lineNumber : 215, className : "gmdebug.dap.Handlers", methodName : "h_launch"});
			haxe_Log.trace(err.message,{ fileName : "src/gmdebug/dap/Handlers.hx", lineNumber : 216, className : "gmdebug.dap.Handlers", methodName : "h_launch"});
			haxe_Log.trace(err.stack,{ fileName : "src/gmdebug/dap/Handlers.hx", lineNumber : 217, className : "gmdebug.dap.Handlers", methodName : "h_launch"});
			haxe_Log.trace("Child process error end///",{ fileName : "src/gmdebug/dap/Handlers.hx", lineNumber : 218, className : "gmdebug.dap.Handlers", methodName : "h_launch"});
			gmdebug_dap_LuaDebugger.inst.shutdown();
		});
		gmdebug_dap_Handlers.setupDebugger(serverFolder);
		let value1 = x.arguments.clientFolders;
		let clientFolders = value1 == null ? [] : value1;
		let _g2_current = 0;
		let _g2_array = clientFolders;
		while(_g2_current < _g2_array.length) {
			let _g3_value = _g2_array[_g2_current];
			let _g3_key = _g2_current++;
			if(!gmdebug_dap_Handlers.validateClientFolder(_g3_value,x)) {
				return;
			}
			clientFolders[_g3_key] = haxe_io_Path.addTrailingSlash(_g3_value);
		}
		let serverSlash = haxe_io_Path.addTrailingSlash(x.arguments.serverFolder);
		gmdebug_dap_LuaDebugger.inst.serverFolder = serverSlash;
		gmdebug_dap_LuaDebugger.inst.clientLocations = clientFolders;
		gmdebug_dap_LuaDebugger.dapMode = gmdebug_dap_DapMode.LAUNCH(childProcess);
		gmdebug_dap_LuaDebugger.inst.startServer(gmdebug_CommMethod.Pipe,x);
	}
	static h_scopes(x) {
		let client = gmdebug_FrameID.getValue(x.arguments.frameId).clientID;
		let tmp = gmdebug_dap_LuaDebugger.clients[client].writeS;
		haxe_Log.trace("composing message",{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 316, className : "gmdebug.dap.LuaDebugger", methodName : "composeMessage"});
		let json = haxe_format_JsonPrinter.print(x,null,null);
		let len = haxe_io_Bytes.ofString(json).length;
		tmp.write("Content-Length: " + len + "\r\n\r\n" + json);
	}
	static setupDebugger(serverFolder) {
		let addonFolder = haxe_io_Path.join([serverFolder,"addons"]);
		let debugFolder = haxe_io_Path.join([addonFolder,"debugee-auto"]);
		if(!js_node_Fs.existsSync(debugFolder)) {
			js_node_ChildProcess.execSync("cp -r ../generated " + addonFolder,{ cwd : haxe_io_Path.directory(__filename)});
		}
	}
	static h_attach(x) {
		let serverFolder = x.arguments.serverFolder;
		if(!gmdebug_dap_Handlers.validateServerFolder(serverFolder,x)) {
			return;
		}
		let value = x.arguments.clientFolders;
		let clientFolders = value == null ? [] : value;
		let _g_current = 0;
		let _g_array = clientFolders;
		while(_g_current < _g_array.length) {
			let _g1_value = _g_array[_g_current];
			let _g1_key = _g_current++;
			if(!gmdebug_dap_Handlers.validateClientFolder(_g1_value,x)) {
				return;
			}
			clientFolders[_g1_key] = haxe_io_Path.addTrailingSlash(_g1_value);
		}
		let serverSlash = haxe_io_Path.addTrailingSlash(x.arguments.serverFolder);
		gmdebug_dap_LuaDebugger.inst.serverFolder = serverSlash;
		gmdebug_dap_LuaDebugger.inst.clientLocations = clientFolders;
		gmdebug_dap_LuaDebugger.inst.startServer(gmdebug_CommMethod.Pipe,x);
	}
	static validateProgramPath(programPath,launchReq) {
		let valid;
		if(programPath == null) {
			let _this = gmdebug_ComposeTools.composeFail(launchReq,"Gmdebug requires the property \"programPath\" to be specified when launching.",{ id : 2, format : "Gmdebug requires the property \"programPath\" to be specified when launching"});
			haxe_Log.trace("sending from dap " + _this.command,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 131, className : "gmdebug.ComposedResponse", methodName : "send"});
			gmdebug_dap_LuaDebugger.inst.sendResponse(_this);
			valid = false;
		} else if(!js_node_Fs.existsSync(programPath)) {
			let _this = gmdebug_ComposeTools.composeFail(launchReq,"The program specified by \"programPath\" does not exist!",{ id : 4, format : "The program specified by \"programPath\" does not exist!"});
			haxe_Log.trace("sending from dap " + _this.command,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 131, className : "gmdebug.ComposedResponse", methodName : "send"});
			gmdebug_dap_LuaDebugger.inst.sendResponse(_this);
			valid = false;
		} else if(!js_node_Fs.statSync(programPath).isFile()) {
			let _this = gmdebug_ComposeTools.composeFail(launchReq,"The program specified by \"programPath\" is not a file.",{ id : 5, format : "The program specified by \"programPath\" is not a file."});
			haxe_Log.trace("sending from dap " + _this.command,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 131, className : "gmdebug.ComposedResponse", methodName : "send"});
			gmdebug_dap_LuaDebugger.inst.sendResponse(_this);
			valid = false;
		} else {
			valid = true;
		}
		if(!valid) {
			gmdebug_dap_LuaDebugger.inst.shutdown();
		}
		return valid;
	}
	static validateServerFolder(serverFolder,attachReq) {
		let valid;
		if(serverFolder == null) {
			let _this = gmdebug_ComposeTools.composeFail(attachReq,"Gmdebug requires the property \"serverFolder\" to be specified.",{ id : 2, format : "Gmdebug requires the property \"serverFolder\" to be specified.", showUser : true, variables : { }});
			haxe_Log.trace("sending from dap " + _this.command,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 131, className : "gmdebug.ComposedResponse", methodName : "send"});
			gmdebug_dap_LuaDebugger.inst.sendResponse(_this);
			valid = false;
		} else {
			let addonFolder = js_node_Path.join(serverFolder,"addons");
			if(!haxe_io_Path.isAbsolute(serverFolder)) {
				let _this = gmdebug_ComposeTools.composeFail(attachReq,"Gmdebug requires the property \"serverFolder\" to be an absolute path (i.e from root folder).",{ id : 3, format : "Gmdebug requires the property \"serverFolder\" to be an absolute path (i.e from root folder)."});
				haxe_Log.trace("sending from dap " + _this.command,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 131, className : "gmdebug.ComposedResponse", methodName : "send"});
				gmdebug_dap_LuaDebugger.inst.sendResponse(_this);
				valid = false;
			} else if(!js_node_Fs.existsSync(serverFolder)) {
				let _this = gmdebug_ComposeTools.composeFail(attachReq,"The \"serverFolder\" path does not exist!",{ id : 4, format : "The \"serverFolder\" path does not exist!"});
				haxe_Log.trace("sending from dap " + _this.command,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 131, className : "gmdebug.ComposedResponse", methodName : "send"});
				gmdebug_dap_LuaDebugger.inst.sendResponse(_this);
				valid = false;
			} else if(!js_node_Fs.statSync(serverFolder).isDirectory()) {
				let _this = gmdebug_ComposeTools.composeFail(attachReq,"The \"serverFolder\" path is not a directory.",{ id : 5, format : "The \"serverFolder\" path is not a directory."});
				haxe_Log.trace("sending from dap " + _this.command,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 131, className : "gmdebug.ComposedResponse", methodName : "send"});
				gmdebug_dap_LuaDebugger.inst.sendResponse(_this);
				valid = false;
			} else if(!js_node_Fs.existsSync(addonFolder) || !js_node_Fs.statSync(addonFolder).isDirectory()) {
				let _this = gmdebug_ComposeTools.composeFail(attachReq,"\"serverFolder\" does not seem to be a garrysmod directory. (looking for \"addons\" folder)",{ id : 6, format : "\"serverFolder\" does not seem to be a garrysmod directory. (looking for \"addons\" folder)"});
				haxe_Log.trace("sending from dap " + _this.command,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 131, className : "gmdebug.ComposedResponse", methodName : "send"});
				gmdebug_dap_LuaDebugger.inst.sendResponse(_this);
				valid = false;
			} else {
				valid = true;
			}
		}
		if(!valid) {
			gmdebug_dap_LuaDebugger.inst.shutdown();
		}
		return valid;
	}
	static validateClientFolder(folder,attachReq) {
		let addonFolder = js_node_Path.join(folder,"addons");
		js_node_Path.join(folder,"data","gmdebug");
		let valid;
		if(!haxe_io_Path.isAbsolute(folder)) {
			let _this = gmdebug_ComposeTools.composeFail(attachReq,"Gmdebug requires client folder: " + folder + " to be an absolute path (i.e from root folder).",{ id : 8, format : "Gmdebug requires client folder: " + folder + " to be an absolute path (i.e from root folder)."});
			haxe_Log.trace("sending from dap " + _this.command,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 131, className : "gmdebug.ComposedResponse", methodName : "send"});
			gmdebug_dap_LuaDebugger.inst.sendResponse(_this);
			valid = false;
		} else if(!js_node_Fs.existsSync(folder)) {
			let _this = gmdebug_ComposeTools.composeFail(attachReq,"The client folder: " + folder + " does not exist!",{ id : 9, format : "The client folder: " + folder + " does not exist!"});
			haxe_Log.trace("sending from dap " + _this.command,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 131, className : "gmdebug.ComposedResponse", methodName : "send"});
			gmdebug_dap_LuaDebugger.inst.sendResponse(_this);
			valid = false;
		} else if(!js_node_Fs.statSync(folder).isDirectory()) {
			let _this = gmdebug_ComposeTools.composeFail(attachReq,"The client folder: " + folder + " is not a directory.",{ id : 10, format : "The client folder: " + folder + " is not a directory."});
			haxe_Log.trace("sending from dap " + _this.command,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 131, className : "gmdebug.ComposedResponse", methodName : "send"});
			gmdebug_dap_LuaDebugger.inst.sendResponse(_this);
			valid = false;
		} else if(!js_node_Fs.existsSync(addonFolder) || !js_node_Fs.statSync(addonFolder).isDirectory()) {
			let _this = gmdebug_ComposeTools.composeFail(attachReq,"The client folder: " + folder + " does not seem to be a garrysmod directory. (looking for \"addons\" folder)",{ id : 11, format : "The client folder: " + folder + " does not seem to be a garrysmod directory. (looking for \"addons\" folder)"});
			haxe_Log.trace("sending from dap " + _this.command,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 131, className : "gmdebug.ComposedResponse", methodName : "send"});
			gmdebug_dap_LuaDebugger.inst.sendResponse(_this);
			valid = false;
		} else {
			valid = true;
		}
		if(!valid) {
			gmdebug_dap_LuaDebugger.inst.shutdown();
		}
		return valid;
	}
}
gmdebug_dap_Handlers.__name__ = true;
class gmdebug_dap_Intercepter {
	static event(ceptedEvent,threadId) {
		switch(ceptedEvent.event) {
		case "output":
			let outputEvent = ceptedEvent;
			let prefix = threadId > 0 ? "[C] - " : "[S] - ";
			outputEvent.body.output = prefix + outputEvent.body.output;
			break;
		case "stopped":
			let stoppedEvent = ceptedEvent;
			if(stoppedEvent.body.threadId > 0) {
				haxe_Log.trace("free my mousepointer please!!",{ fileName : "src/gmdebug/dap/Intercepter.hx", lineNumber : 22, className : "gmdebug.dap.Intercepter", methodName : "event"});
				js_node_ChildProcess.execSync("xdotool key XF86Ungrab");
			}
			break;
		default:
		}
	}
}
gmdebug_dap_Intercepter.__name__ = true;
var vscode_debugAdapter_DebugSession = require("vscode-debugadapter").DebugSession;
var gmdebug_dap_DapMode = $hxEnums["gmdebug.dap.DapMode"] = { __ename__ : true, __constructs__ : ["ATTACH","LAUNCH"]
	,ATTACH: {_hx_index:0,__enum__:"gmdebug.dap.DapMode",toString:$estr}
	,LAUNCH: ($_=function(child) { return {_hx_index:1,child:child,__enum__:"gmdebug.dap.DapMode",toString:$estr}; },$_.__params__ = ["child"],$_)
};
class haxe_ds_IntMap {
	constructor() {
		this.h = { };
	}
	remove(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
}
haxe_ds_IntMap.__name__ = true;
Object.assign(haxe_ds_IntMap.prototype, {
	__class__: haxe_ds_IntMap
	,h: null
});
class gmdebug_dap_LuaDebugger extends vscode_debugAdapter_DebugSession {
	constructor(x,y) {
		super(x,y);
		gmdebug_dap_LuaDebugger.inst = this;
		this.clientLocations = [];
		this.serverFolder = null;
		this.clientsTaken = new haxe_ds_IntMap();
		this.bytesProcessor = new gmdebug_dap_BytesProcessor();
		process.on("uncaughtException",$bind(this,this.uncaughtException));
	}
	uncaughtException(err,origin) {
		haxe_Log.trace(err.message,{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 68, className : "gmdebug.dap.LuaDebugger", methodName : "uncaughtException"});
		haxe_Log.trace(err.stack,{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 69, className : "gmdebug.dap.LuaDebugger", methodName : "uncaughtException"});
		this.shutdown();
	}
	playerAddedMessage(x) {
		let _this = this.clientLocations;
		let _g_current = 0;
		while(_g_current < _this.length) {
			let _g1_value = _this[_g_current];
			let _g1_key = _g_current++;
			if(!this.clientsTaken.h.hasOwnProperty(_g1_key)) {
				try {
					this.playerTry(_g1_value,x.playerID,x.name);
					this.clientsTaken.h[_g1_key] = true;
					break;
				} catch( _g ) {
					haxe_Log.trace("can't aquire in " + _g1_value,{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 82, className : "gmdebug.dap.LuaDebugger", methodName : "playerAddedMessage"});
				}
			}
		}
	}
	playerTry(clientLoc,clientNo,playerName) {
		let _gthis = this;
		let data = haxe_io_Path.join([clientLoc,gmdebug_Cross.DATA]);
		let input = haxe_io_Path.join([data,gmdebug_Cross.INPUT]);
		let out = haxe_io_Path.join([data,gmdebug_Cross.OUTPUT]);
		this.makeFifosIfNotExist(input,out);
		let ready = haxe_io_Path.join([data,gmdebug_Cross.READY]);
		this.aquireReadSocket(out).handle(function(__t0) {
			let __t0_result;
			let _g = tink_await_OutcomeTools.getOutcome(__t0);
			switch(_g._hx_index) {
			case 0:
				__t0_result = _g.data;
				break;
			case 1:
				throw haxe_Exception.thrown(_g.failure);
			}
			let read = __t0_result;
			_gthis.aquireWriteSocket(input).handle(function(__t1) {
				let __t1_result;
				let _g = tink_await_OutcomeTools.getOutcome(__t1);
				switch(_g._hx_index) {
				case 0:
					__t1_result = _g.data;
					break;
				case 1:
					throw haxe_Exception.thrown(_g.failure);
				}
				let write = __t1_result;
				let number = gmdebug_dap_LuaDebugger.clients.length;
				read.on("data",function(x) {
					_gthis.readGmodBuffer(x,number);
				});
				gmdebug_dap_LuaDebugger.clients.push({ readS : read, writeS : write});
				gmdebug_dap_LuaDebugger.clientFiles[number] = { write : input, read : out};
				js_node_Fs.writeFileSync(ready,"");
				write.write("\x04\r\n");
				let _this = new gmdebug_ComposedEvent("thread",{ threadId : number, reason : "started"});
				haxe_Log.trace("sending from dap " + _this.event,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 59, className : "gmdebug.ComposedEvent", methodName : "send"});
				gmdebug_dap_LuaDebugger.inst.sendEvent(_this);
				gmdebug_dap_LuaDebugger.mapClientName.h[number] = playerName;
				gmdebug_dap_LuaDebugger.mapClientID.h[number] = clientNo;
				let msg = new gmdebug_ComposedGmDebugMessage(3,{ location : _gthis.serverFolder});
				let tmp = gmdebug_dap_LuaDebugger.clients[number].writeS;
				haxe_Log.trace("composing message",{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 316, className : "gmdebug.dap.LuaDebugger", methodName : "composeMessage"});
				let json = haxe_format_JsonPrinter.print(msg,null,null);
				let len = haxe_io_Bytes.ofString(json).length;
				tmp.write("Content-Length: " + len + "\r\n\r\n" + json);
				let msg1 = new gmdebug_ComposedGmDebugMessage(2,{ id : number});
				let tmp1 = gmdebug_dap_LuaDebugger.clients[number].writeS;
				haxe_Log.trace("composing message",{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 316, className : "gmdebug.dap.LuaDebugger", methodName : "composeMessage"});
				let json1 = haxe_format_JsonPrinter.print(msg1,null,null);
				let len1 = haxe_io_Bytes.ofString(json1).length;
				tmp1.write("Content-Length: " + len1 + "\r\n\r\n" + json1);
			});
		});
	}
	playerRemovedMessage(x) {
		let _this = new gmdebug_ComposedEvent("thread",{ threadId : gmdebug_dap_LuaDebugger.mapClientID.h[x.playerID], reason : "exited"});
		haxe_Log.trace("sending from dap " + _this.event,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 59, className : "gmdebug.ComposedEvent", methodName : "send"});
		gmdebug_dap_LuaDebugger.inst.sendEvent(_this);
		this.clientsTaken.remove(gmdebug_dap_LuaDebugger.mapClientID.h[x.playerID]);
	}
	serverInfoMessage(x) {
		let sp = x.ip.split(":");
		let ip = x.isLan ? js_Ip.address() : sp[0];
		let port = sp[1];
		js_node_ChildProcess.spawn("xdg-open steam://connect/" + ip + ":" + port,{ shell : true});
	}
	processCustomMessages(x) {
		haxe_Log.trace("custom message",{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 142, className : "gmdebug.dap.LuaDebugger", methodName : "processCustomMessages"});
		switch(x.msg) {
		case 0:
			this.playerAddedMessage(x.body);
			break;
		case 1:
			this.playerRemovedMessage(x.body);
			break;
		case 2:case 3:
			throw haxe_Exception.thrown("dur");
		case 4:
			this.serverInfoMessage(x.body);
			break;
		}
	}
	aquireReadSocket(out) {
		return tink_core_Future.async(function(__return) {
			try {
				let open = js_node_util_Promisify(js_node_Fs.open);
				tink_core_Future.ofJsPromise(open(out,js_node_Fs.constants.O_RDONLY | js_node_Fs.constants.O_NONBLOCK)).handle(function(__t2) {
					try {
						let __t2_result;
						let _g = tink_await_OutcomeTools.getOutcome(__t2);
						switch(_g._hx_index) {
						case 0:
							__t2_result = _g.data;
							break;
						case 1:
							__return(tink_core_Outcome.Failure(_g.failure));
							return;
						}
						let fd = __t2_result;
						__return(tink_core_Outcome.Success(new js_node_net_Socket({ fd : fd, writable : false})));
						return;
					} catch( _g ) {
						let _g1 = haxe_Exception.caught(_g).unwrap();
						__return(tink_core_Outcome.Failure(_g1));
					}
				});
			} catch( _g ) {
				let _g1 = haxe_Exception.caught(_g).unwrap();
				__return(tink_core_Outcome.Failure(_g1));
			}
		});
	}
	aquireWriteSocket(inp) {
		return tink_core_Future.async(function(__return) {
			try {
				let open = js_node_util_Promisify(js_node_Fs.open);
				tink_core_Future.ofJsPromise(open(inp,js_node_Fs.constants.O_RDWR | js_node_Fs.constants.O_NONBLOCK)).handle(function(__t3) {
					try {
						let __t3_result;
						let _g = tink_await_OutcomeTools.getOutcome(__t3);
						switch(_g._hx_index) {
						case 0:
							__t3_result = _g.data;
							break;
						case 1:
							__return(tink_core_Outcome.Failure(_g.failure));
							return;
						}
						let fd = __t3_result;
						haxe_Log.trace(fd,{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 164, className : "gmdebug.dap.LuaDebugger", methodName : "aquireWriteSocket"});
						__return(tink_core_Outcome.Success(new js_node_net_Socket({ fd : fd, readable : false})));
						return;
					} catch( _g ) {
						let _g1 = haxe_Exception.caught(_g).unwrap();
						__return(tink_core_Outcome.Failure(_g1));
					}
				});
			} catch( _g ) {
				let _g1 = haxe_Exception.caught(_g).unwrap();
				__return(tink_core_Outcome.Failure(_g1));
			}
		});
	}
	pokeServerNamedPipes(attachReq) {
		let _gthis = this;
		return tink_core_Promise.ofSpecific(tink_core_Future.async(function(__return) {
			try {
				if(!sys_FileSystem.exists(haxe_io_Path.join([_gthis.serverFolder,gmdebug_Cross.DATA]))) {
					__return(tink_core_Outcome.Failure(tink_await_Error.fromAny("GmDebug is not running on given server")));
					return;
				}
				let ready = haxe_io_Path.join([_gthis.serverFolder,gmdebug_Cross.DATA,gmdebug_Cross.READY]);
				let input = haxe_io_Path.join([_gthis.serverFolder,gmdebug_Cross.DATA,gmdebug_Cross.INPUT]);
				let output = haxe_io_Path.join([_gthis.serverFolder,gmdebug_Cross.DATA,gmdebug_Cross.OUTPUT]);
				_gthis.makeFifosIfNotExist(input,output);
				_gthis.aquireWriteSocket(input).handle(function(__t4) {
					try {
						let __t4_result;
						let _g = tink_await_OutcomeTools.getOutcome(__t4);
						switch(_g._hx_index) {
						case 0:
							__t4_result = _g.data;
							break;
						case 1:
							__return(tink_core_Outcome.Failure(_g.failure));
							return;
						}
						let gmodInput = __t4_result;
						_gthis.aquireReadSocket(output).handle(function(__t5) {
							try {
								let __t5_result;
								let _g = tink_await_OutcomeTools.getOutcome(__t5);
								switch(_g._hx_index) {
								case 0:
									__t5_result = _g.data;
									break;
								case 1:
									__return(tink_core_Outcome.Failure(_g.failure));
									return;
								}
								let gmodOutput = __t5_result;
								gmdebug_dap_LuaDebugger.clients[0] = { writeS : gmodInput, readS : gmodOutput};
								gmdebug_dap_LuaDebugger.clientFiles[0] = { write : input, read : output};
								gmodOutput.on("data",function(x) {
									_gthis.readGmodBuffer(x,0);
								});
								let msg = new gmdebug_ComposedGmDebugMessage(2,{ id : 0});
								let p = gmdebug_dap_LuaDebugger.clients[0].writeS;
								haxe_Log.trace("composing message",{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 316, className : "gmdebug.dap.LuaDebugger", methodName : "composeMessage"});
								let json = haxe_format_JsonPrinter.print(msg,null,null);
								let len = haxe_io_Bytes.ofString(json).length;
								p.write("Content-Length: " + len + "\r\n\r\n" + json);
								switch(gmdebug_dap_LuaDebugger.dapMode._hx_index) {
								case 0:
									let msg1 = new gmdebug_ComposedGmDebugMessage(3,{ location : _gthis.serverFolder, dapMode : "Attach"});
									let p1 = gmdebug_dap_LuaDebugger.clients[0].writeS;
									haxe_Log.trace("composing message",{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 316, className : "gmdebug.dap.LuaDebugger", methodName : "composeMessage"});
									let json1 = haxe_format_JsonPrinter.print(msg1,null,null);
									let len1 = haxe_io_Bytes.ofString(json1).length;
									p1.write("Content-Length: " + len1 + "\r\n\r\n" + json1);
									break;
								case 1:
									let msg2 = new gmdebug_ComposedGmDebugMessage(3,{ location : _gthis.serverFolder, dapMode : "Launch"});
									let p2 = gmdebug_dap_LuaDebugger.clients[0].writeS;
									haxe_Log.trace("composing message",{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 316, className : "gmdebug.dap.LuaDebugger", methodName : "composeMessage"});
									let json2 = haxe_format_JsonPrinter.print(msg2,null,null);
									let len2 = haxe_io_Bytes.ofString(json2).length;
									p2.write("Content-Length: " + len2 + "\r\n\r\n" + json2);
									break;
								}
								js_node_Fs.writeFileSync(ready,"");
								__return(tink_core_Outcome.Success(null));
								return;
							} catch( _g ) {
								let _g1 = haxe_Exception.caught(_g).unwrap();
								__return(tink_core_Outcome.Failure(_g1));
							}
						});
					} catch( _g ) {
						let _g1 = haxe_Exception.caught(_g).unwrap();
						__return(tink_core_Outcome.Failure(_g1));
					}
				});
			} catch( _g ) {
				let _g1 = haxe_Exception.caught(_g).unwrap();
				__return(tink_core_Outcome.Failure(_g1));
			}
		}));
	}
	makeFifosIfNotExist(input,output) {
		if(!sys_FileSystem.exists(input) && !sys_FileSystem.exists(output)) {
			js_node_ChildProcess.execSync("mkfifo " + input);
			js_node_ChildProcess.execSync("mkfifo " + output);
			js_node_Fs.chmodSync(input,"744");
			js_node_Fs.chmodSync(output,"722");
		}
	}
	readGmodBuffer(jsBuf,clientNo) {
		let messages = this.bytesProcessor.process(jsBuf,clientNo);
		let _g = 0;
		while(_g < messages.length) {
			let msg = messages[_g];
			++_g;
			this.processDebugeeMessage(msg,clientNo);
		}
		if(this.bytesProcessor.fillRequested) {
			gmdebug_dap_LuaDebugger.clients[clientNo].writeS.write("\x04\r\n");
		}
	}
	processDebugeeMessage(debugeeMessage,threadId) {
		debugeeMessage.seq = 0;
		switch(debugeeMessage.type) {
		case "event":
			let event = debugeeMessage;
			let cmd = event.event;
			haxe_Log.trace("evented, " + cmd,{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 227, className : "gmdebug.dap.LuaDebugger", methodName : "processDebugeeMessage"});
			gmdebug_dap_Intercepter.event(event,threadId);
			this.sendEvent(event);
			break;
		case "gmdebug":
			this.processCustomMessages(debugeeMessage);
			break;
		case "response":
			let cmd1 = debugeeMessage.command;
			haxe_Log.trace("responded, " + cmd1,{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 232, className : "gmdebug.dap.LuaDebugger", methodName : "processDebugeeMessage"});
			this.sendResponse(debugeeMessage);
			break;
		default:
			haxe_Log.trace("bad...",{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 237, className : "gmdebug.dap.LuaDebugger", methodName : "processDebugeeMessage"});
			throw haxe_Exception.thrown("unhandled");
		}
	}
	shutdown() {
		let _g = gmdebug_dap_LuaDebugger.dapMode;
		if(_g._hx_index == 1) {
			let _g1 = _g.child;
			_g1.stdin.write("quit\n");
			_g1.kill();
		}
		let _this = gmdebug_dap_LuaDebugger.clients;
		let _g2_current = 0;
		while(_g2_current < _this.length) {
			let _g3_value = _this[_g2_current];
			let _g3_key = _g2_current++;
			let client = _g3_value.writeS;
			let msg = new gmdebug_ComposedRequest("disconnect",{ });
			haxe_Log.trace("composing message",{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 316, className : "gmdebug.dap.LuaDebugger", methodName : "composeMessage"});
			let json = haxe_format_JsonPrinter.print(msg,null,null);
			let len = haxe_io_Bytes.ofString(json).length;
			client.write("Content-Length: " + len + "\r\n\r\n" + json);
			_g3_value.readS.end();
			_g3_value.writeS.end();
			js_node_Fs.unlinkSync(gmdebug_dap_LuaDebugger.clientFiles[_g3_key].read);
			js_node_Fs.unlinkSync(gmdebug_dap_LuaDebugger.clientFiles[_g3_key].write);
		}
		gmdebug_dap_LuaDebugger.clients.length = 0;
		super.shutdown();
	}
	startServer(commMethod,attachReq) {
		let _gthis = this;
		switch(commMethod._hx_index) {
		case 0:
			this.pokeServerNamedPipes(attachReq).handle(function(out) {
				switch(out._hx_index) {
				case 0:
					haxe_Log.trace("suceed",{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 299, className : "gmdebug.dap.LuaDebugger", methodName : "startServer"});
					let resp = gmdebug_ComposeTools.compose(attachReq,"attach");
					haxe_Log.trace("sending from dap " + resp.command,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 131, className : "gmdebug.ComposedResponse", methodName : "send"});
					gmdebug_dap_LuaDebugger.inst.sendResponse(resp);
					break;
				case 1:
					let _g = out.failure;
					haxe_Log.trace(_g,{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 303, className : "gmdebug.dap.LuaDebugger", methodName : "startServer"});
					let resp1 = gmdebug_ComposeTools.composeFail(attachReq,"attach fail",{ id : 1, format : "Failed to attach to server " + _g.message});
					haxe_Log.trace("sending from dap " + resp1.command,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 131, className : "gmdebug.ComposedResponse", methodName : "send"});
					gmdebug_dap_LuaDebugger.inst.sendResponse(resp1);
					break;
				}
			});
			break;
		case 1:
			let luaServer = js_node_Net.createServer(function(sock) {
				sock.setKeepAlive(true);
				gmdebug_dap_LuaDebugger.clients[0] = { writeS : sock, readS : sock};
				let aresp = gmdebug_ComposeTools.compose(attachReq,"attach");
				haxe_Log.trace("sending from dap " + aresp.command,{ fileName : "src/gmdebug/ComposedMessage.hx", lineNumber : 131, className : "gmdebug.ComposedResponse", methodName : "send"});
				gmdebug_dap_LuaDebugger.inst.sendResponse(aresp);
				sock.addListener("error",function(list) {
					haxe_Log.trace(list,{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 279, className : "gmdebug.dap.LuaDebugger", methodName : "startServer"});
					haxe_Log.trace(list.message,{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 280, className : "gmdebug.dap.LuaDebugger", methodName : "startServer"});
					throw haxe_Exception.thrown("Socket error");
				});
				sock.addListener("error",function(x) {
					haxe_Log.trace("could not recieve packet",{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 284, className : "gmdebug.dap.LuaDebugger", methodName : "startServer"});
					haxe_Log.trace(x,{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 285, className : "gmdebug.dap.LuaDebugger", methodName : "startServer"});
					_gthis.shutdown();
					throw x;
				});
				sock.addListener("data",function(x) {
					_gthis.readGmodBuffer(x,0);
				});
			});
			luaServer.listen({ port : 56789, host : "localhost"},function() {
				haxe_Log.trace(luaServer.address(),{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 294, className : "gmdebug.dap.LuaDebugger", methodName : "startServer"});
			});
			break;
		}
	}
	composeMessage(msg) {
		haxe_Log.trace("composing message",{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 316, className : "gmdebug.dap.LuaDebugger", methodName : "composeMessage"});
		let json = haxe_format_JsonPrinter.print(msg,null,null);
		let len = haxe_io_Bytes.ofString(json).length;
		return "Content-Length: " + len + "\r\n\r\n" + json;
	}
	sendToAll(msg) {
		haxe_Log.trace("composing message",{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 316, className : "gmdebug.dap.LuaDebugger", methodName : "composeMessage"});
		let json = haxe_format_JsonPrinter.print(msg,null,null);
		let len = haxe_io_Bytes.ofString(json).length;
		let msg1 = "Content-Length: " + len + "\r\n\r\n" + json;
		let _g = 0;
		let _g1 = gmdebug_dap_LuaDebugger.clients;
		while(_g < _g1.length) {
			let client = _g1[_g];
			++_g;
			client.writeS.write(msg1);
		}
	}
	sendToServer(msg) {
		let tmp = gmdebug_dap_LuaDebugger.clients[0].writeS;
		haxe_Log.trace("composing message",{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 316, className : "gmdebug.dap.LuaDebugger", methodName : "composeMessage"});
		let json = haxe_format_JsonPrinter.print(msg,null,null);
		let len = haxe_io_Bytes.ofString(json).length;
		tmp.write("Content-Length: " + len + "\r\n\r\n" + json);
	}
	sendToClient(client,msg) {
		let tmp = gmdebug_dap_LuaDebugger.clients[client].writeS;
		haxe_Log.trace("composing message",{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 316, className : "gmdebug.dap.LuaDebugger", methodName : "composeMessage"});
		let json = haxe_format_JsonPrinter.print(msg,null,null);
		let len = haxe_io_Bytes.ofString(json).length;
		tmp.write("Content-Length: " + len + "\r\n\r\n" + json);
	}
	handleMessage(message) {
		if(gmdebug_dap_LuaDebugger.inst == null) {
			gmdebug_dap_LuaDebugger.inst = this;
		}
		try {
			if(message.type == "request") {
				haxe_Log.trace("recieved message from client " + message.command,{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 343, className : "gmdebug.dap.LuaDebugger", methodName : "handleMessage"});
				gmdebug_dap_Handlers.handle(message);
			} else {
				haxe_Log.trace("unhandled message from client",{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 346, className : "gmdebug.dap.LuaDebugger", methodName : "handleMessage"});
			}
		} catch( _g ) {
			let e = haxe_Exception.caught(_g);
			haxe_Log.trace(e.details(),{ fileName : "src/gmdebug/dap/LuaDebugger.hx", lineNumber : 349, className : "gmdebug.dap.LuaDebugger", methodName : "handleMessage"});
			this.shutdown();
		}
	}
}
gmdebug_dap_LuaDebugger.__name__ = true;
gmdebug_dap_LuaDebugger.__super__ = vscode_debugAdapter_DebugSession;
Object.assign(gmdebug_dap_LuaDebugger.prototype, {
	__class__: gmdebug_dap_LuaDebugger
	,serverFolder: null
	,clientLocations: null
	,clientsTaken: null
	,bytesProcessor: null
});
class gmdebug_dap_Main {
	static main() {
		let args = process.argv.slice(2).slice(2);
		let port = 0;
		let _g = 0;
		while(_g < args.length) {
			let arg = args[_g];
			++_g;
			let portMatch = new EReg("^--server=(\\d{4,5})$","");
			if(portMatch.match(arg)) {
				port = Std.parseInt(portMatch.matched(0));
			}
		}
		if(port > 0) {
			let server = js_node_Net.createServer(function(socket) {
				socket.on("end",function() {
					haxe_Log.trace("Closed",{ fileName : "src/gmdebug/dap/Main.hx", lineNumber : 27, className : "gmdebug.dap.Main", methodName : "main"});
				});
				let session = new gmdebug_dap_LuaDebugger(false,true);
				session.setRunAsServer(true);
				session.start(socket,socket);
			});
			server.listen(4555,"localhost");
		} else {
			let session = new gmdebug_dap_LuaDebugger(false);
			process.on("SIGTRM",function() {
				session.shutdown();
			});
			session.start(process.stdin,process.stdout);
			haxe_Log.trace = function(v,infos) {
				let str = haxe_Log.formatOutput(v,infos);
				console.error(str);
			};
			haxe_Log.trace("started stdin",{ fileName : "src/gmdebug/dap/Main.hx", lineNumber : 43, className : "gmdebug.dap.Main", methodName : "main"});
		}
	}
}
gmdebug_dap_Main.__name__ = true;
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
class haxe_CallStack {
	static toString(stack) {
		let b = new StringBuf();
		let _g = 0;
		let _g1 = stack;
		while(_g < _g1.length) {
			let s = _g1[_g];
			++_g;
			b.b += "\nCalled from ";
			haxe_CallStack.itemToString(b,s);
		}
		return b.b;
	}
	static subtract(this1,stack) {
		let startIndex = -1;
		let i = -1;
		while(++i < this1.length) {
			let _g = 0;
			let _g1 = stack.length;
			while(_g < _g1) {
				let j = _g++;
				if(haxe_CallStack.equalItems(this1[i],stack[j])) {
					if(startIndex < 0) {
						startIndex = i;
					}
					++i;
					if(i >= this1.length) {
						break;
					}
				} else {
					startIndex = -1;
				}
			}
			if(startIndex >= 0) {
				break;
			}
		}
		if(startIndex >= 0) {
			return this1.slice(0,startIndex);
		} else {
			return this1;
		}
	}
	static equalItems(item1,item2) {
		if(item1 == null) {
			if(item2 == null) {
				return true;
			} else {
				return false;
			}
		} else {
			switch(item1._hx_index) {
			case 0:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 0) {
					return true;
				} else {
					return false;
				}
				break;
			case 1:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 1) {
					return item1.m == item2.m;
				} else {
					return false;
				}
				break;
			case 2:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 2) {
					if(item1.file == item2.file && item1.line == item2.line && item1.column == item2.column) {
						return haxe_CallStack.equalItems(item1.s,item2.s);
					} else {
						return false;
					}
				} else {
					return false;
				}
				break;
			case 3:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 3) {
					if(item1.classname == item2.classname) {
						return item1.method == item2.method;
					} else {
						return false;
					}
				} else {
					return false;
				}
				break;
			case 4:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 4) {
					return item1.v == item2.v;
				} else {
					return false;
				}
				break;
			}
		}
	}
	static itemToString(b,s) {
		switch(s._hx_index) {
		case 0:
			b.b += "a C function";
			break;
		case 1:
			let _g = s.m;
			b.b = (b.b += "module ") + (_g == null ? "null" : "" + _g);
			break;
		case 2:
			let _g1 = s.column;
			let _g2 = s.line;
			let _g3 = s.file;
			let _g4 = s.s;
			if(_g4 != null) {
				haxe_CallStack.itemToString(b,_g4);
				b.b += " (";
			}
			b.b = (b.b += _g3 == null ? "null" : "" + _g3) + " line ";
			b.b += _g2 == null ? "null" : "" + _g2;
			if(_g1 != null) {
				b.b = (b.b += " column ") + (_g1 == null ? "null" : "" + _g1);
			}
			if(_g4 != null) {
				b.b += ")";
			}
			break;
		case 3:
			let _g5 = s.method;
			let _g6 = s.classname;
			b.b = (b.b += Std.string(_g6 == null ? "<unknown>" : _g6)) + ".";
			b.b += _g5 == null ? "null" : "" + _g5;
			break;
		case 4:
			let _g7 = s.v;
			b.b = (b.b += "local function #") + (_g7 == null ? "null" : "" + _g7);
			break;
		}
	}
}
class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message;
		this.__previousException = previous;
		this.__nativeException = native != null ? native : this;
		this.__skipStack = 0;
		let old = Error.prepareStackTrace;
		Error.prepareStackTrace = function(e) { return e.stack; }
		if(((native) instanceof Error)) {
			this.stack = native.stack;
		} else {
			let e = null;
			if(Error.captureStackTrace) {
				Error.captureStackTrace(this,haxe_Exception);
				e = this;
			} else {
				e = new Error();
				if(typeof(e.stack) == "undefined") {
					try { throw e; } catch(_) {}
					this.__skipStack++;
				}
			}
			this.stack = e.stack;
		}
		Error.prepareStackTrace = old;
	}
	unwrap() {
		return this.__nativeException;
	}
	toString() {
		return this.get_message();
	}
	details() {
		if(this.get_previous() == null) {
			let tmp = "Exception: " + this.get_message();
			let tmp1 = this.get_stack();
			return tmp + (tmp1 == null ? "null" : haxe_CallStack.toString(tmp1));
		} else {
			let result = "";
			let e = this;
			let prev = null;
			while(e != null) {
				if(prev == null) {
					let result1 = "Exception: " + e.get_message();
					let tmp = e.get_stack();
					result = result1 + (tmp == null ? "null" : haxe_CallStack.toString(tmp)) + result;
				} else {
					let prevStack = haxe_CallStack.subtract(e.get_stack(),prev.get_stack());
					result = "Exception: " + e.get_message() + (prevStack == null ? "null" : haxe_CallStack.toString(prevStack)) + "\n\nNext " + result;
				}
				prev = e;
				e = e.get_previous();
			}
			return result;
		}
	}
	__shiftStack() {
		this.__skipStack++;
	}
	get_message() {
		return this.message;
	}
	get_previous() {
		return this.__previousException;
	}
	get_native() {
		return this.__nativeException;
	}
	get_stack() {
		let _g = this.__exceptionStack;
		if(_g == null) {
			let value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			return _g;
		}
	}
	setProperty(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	static caught(value) {
		if(((value) instanceof haxe_Exception)) {
			return value;
		} else if(((value) instanceof Error)) {
			return new haxe_Exception(value.message,null,value);
		} else {
			return new haxe_ValueException(value,null,value);
		}
	}
	static thrown(value) {
		if(((value) instanceof haxe_Exception)) {
			return value.get_native();
		} else if(((value) instanceof Error)) {
			return value;
		} else {
			let e = new haxe_ValueException(value);
			e.__skipStack++;
			return e;
		}
	}
}
haxe_Exception.__name__ = true;
haxe_Exception.__super__ = Error;
Object.assign(haxe_Exception.prototype, {
	__class__: haxe_Exception
	,__skipStack: null
	,__nativeException: null
	,__previousException: null
});
class haxe_Log {
	static formatOutput(v,infos) {
		let str = Std.string(v);
		if(infos == null) {
			return str;
		}
		let pstr = infos.fileName + ":" + infos.lineNumber;
		if(infos.customParams != null) {
			let _g = 0;
			let _g1 = infos.customParams;
			while(_g < _g1.length) {
				let v = _g1[_g];
				++_g;
				str += ", " + Std.string(v);
			}
		}
		return pstr + ": " + str;
	}
	static trace(v,infos) {
		let str = haxe_Log.formatOutput(v,infos);
		if(typeof(console) != "undefined" && console.log != null) {
			console.log(str);
		}
	}
}
haxe_Log.__name__ = true;
class haxe_NativeStackTrace {
	static toHaxe(s,skip) {
		if(skip == null) {
			skip = 0;
		}
		if(s == null) {
			return [];
		} else if(typeof(s) == "string") {
			let stack = s.split("\n");
			if(stack[0] == "Error") {
				stack.shift();
			}
			let m = [];
			let _g = 0;
			let _g1 = stack.length;
			while(_g < _g1) {
				let i = _g++;
				if(skip > i) {
					continue;
				}
				let line = stack[i];
				let matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
				if(matched != null) {
					let path = matched[1].split(".");
					if(path[0] == "$hxClasses") {
						path.shift();
					}
					let meth = path.pop();
					let file = matched[2];
					let line = Std.parseInt(matched[3]);
					let column = Std.parseInt(matched[4]);
					m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line,column));
				} else {
					m.push(haxe_StackItem.Module(StringTools.trim(line)));
				}
			}
			return m;
		} else if(skip > 0 && Array.isArray(s)) {
			return s.slice(skip);
		} else {
			return s;
		}
	}
	static normalize(stack,skipItems) {
		if(skipItems == null) {
			skipItems = 0;
		}
		if(Array.isArray(stack) && skipItems > 0) {
			return stack.slice(skipItems);
		} else if(typeof(stack) == "string") {
			switch(stack.substring(0,6)) {
			case "Error\n":case "Error:":
				++skipItems;
				break;
			default:
			}
			return haxe_NativeStackTrace.skipLines(stack,skipItems);
		} else {
			return stack;
		}
	}
	static skipLines(stack,skip,pos) {
		if(pos == null) {
			pos = 0;
		}
		while(true) if(skip > 0) {
			pos = stack.indexOf("\n",pos);
			if(pos < 0) {
				return "";
			} else {
				skip = --skip;
				pos += 1;
				continue;
			}
		} else {
			return stack.substring(pos);
		}
	}
}
haxe_NativeStackTrace.__name__ = true;
class haxe_ValueException extends haxe_Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value;
		this.__skipStack++;
	}
	unwrap() {
		return this.value;
	}
}
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
Object.assign(haxe_ValueException.prototype, {
	__class__: haxe_ValueException
	,value: null
});
class haxe_ds_StringMap {
	constructor() {
		this.h = Object.create(null);
	}
	static keysIterator(h) {
		let keys = Object.keys(h);
		let len = keys.length;
		let idx = 0;
		return { hasNext : function() {
			return idx < len;
		}, next : function() {
			idx += 1;
			return keys[idx - 1];
		}};
	}
}
haxe_ds_StringMap.__name__ = true;
Object.assign(haxe_ds_StringMap.prototype, {
	__class__: haxe_ds_StringMap
	,h: null
});
class haxe_format_JsonParser {
	constructor(str) {
		this.str = str;
		this.pos = 0;
	}
	doParse() {
		let result = this.parseRec();
		let c;
		while(true) {
			c = this.str.charCodeAt(this.pos++);
			if(!(c == c)) {
				break;
			}
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				this.invalidChar();
			}
		}
		return result;
	}
	parseRec() {
		while(true) {
			let c = this.str.charCodeAt(this.pos++);
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			case 34:
				return this.parseString();
			case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				let c1 = c;
				let start = this.pos - 1;
				let minus = c == 45;
				let digit = !minus;
				let zero = c == 48;
				let point = false;
				let e = false;
				let pm = false;
				let end = false;
				while(true) {
					c1 = this.str.charCodeAt(this.pos++);
					switch(c1) {
					case 43:case 45:
						if(!e || pm) {
							this.invalidNumber(start);
						}
						digit = false;
						pm = true;
						break;
					case 46:
						if(minus || point || e) {
							this.invalidNumber(start);
						}
						digit = false;
						point = true;
						break;
					case 48:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
							zero = true;
						}
						digit = true;
						break;
					case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
						}
						digit = true;
						zero = false;
						break;
					case 69:case 101:
						if(minus || zero || e) {
							this.invalidNumber(start);
						}
						digit = false;
						e = true;
						break;
					default:
						if(!digit) {
							this.invalidNumber(start);
						}
						this.pos--;
						end = true;
					}
					if(end) {
						break;
					}
				}
				let f = parseFloat(HxOverrides.substr(this.str,start,this.pos - start));
				let i = f | 0;
				if(i == f) {
					return i;
				} else {
					return f;
				}
				break;
			case 91:
				let arr = [];
				let comma = null;
				while(true) {
					let c = this.str.charCodeAt(this.pos++);
					switch(c) {
					case 9:case 10:case 13:case 32:
						break;
					case 44:
						if(comma) {
							comma = false;
						} else {
							this.invalidChar();
						}
						break;
					case 93:
						if(comma == false) {
							this.invalidChar();
						}
						return arr;
					default:
						if(comma) {
							this.invalidChar();
						}
						this.pos--;
						arr.push(this.parseRec());
						comma = true;
					}
				}
				break;
			case 102:
				let save = this.pos;
				if(this.str.charCodeAt(this.pos++) != 97 || this.str.charCodeAt(this.pos++) != 108 || this.str.charCodeAt(this.pos++) != 115 || this.str.charCodeAt(this.pos++) != 101) {
					this.pos = save;
					this.invalidChar();
				}
				return false;
			case 110:
				let save1 = this.pos;
				if(this.str.charCodeAt(this.pos++) != 117 || this.str.charCodeAt(this.pos++) != 108 || this.str.charCodeAt(this.pos++) != 108) {
					this.pos = save1;
					this.invalidChar();
				}
				return null;
			case 116:
				let save2 = this.pos;
				if(this.str.charCodeAt(this.pos++) != 114 || this.str.charCodeAt(this.pos++) != 117 || this.str.charCodeAt(this.pos++) != 101) {
					this.pos = save2;
					this.invalidChar();
				}
				return true;
			case 123:
				let obj = { };
				let field = null;
				let comma1 = null;
				while(true) {
					let c = this.str.charCodeAt(this.pos++);
					switch(c) {
					case 9:case 10:case 13:case 32:
						break;
					case 34:
						if(field != null || comma1) {
							this.invalidChar();
						}
						field = this.parseString();
						break;
					case 44:
						if(comma1) {
							comma1 = false;
						} else {
							this.invalidChar();
						}
						break;
					case 58:
						if(field == null) {
							this.invalidChar();
						}
						obj[field] = this.parseRec();
						field = null;
						comma1 = true;
						break;
					case 125:
						if(field != null || comma1 == false) {
							this.invalidChar();
						}
						return obj;
					default:
						this.invalidChar();
					}
				}
				break;
			default:
				this.invalidChar();
			}
		}
	}
	parseString() {
		let start = this.pos;
		let buf = null;
		let prev = -1;
		while(true) {
			let c = this.str.charCodeAt(this.pos++);
			if(c == 34) {
				break;
			}
			if(c == 92) {
				if(buf == null) {
					buf = new StringBuf();
				}
				let s = this.str;
				let len = this.pos - start - 1;
				buf.b += len == null ? HxOverrides.substr(s,start,null) : HxOverrides.substr(s,start,len);
				c = this.str.charCodeAt(this.pos++);
				if(c != 117 && prev != -1) {
					buf.b += String.fromCodePoint(65533);
					prev = -1;
				}
				switch(c) {
				case 34:case 47:case 92:
					buf.b += String.fromCodePoint(c);
					break;
				case 98:
					buf.b += String.fromCodePoint(8);
					break;
				case 102:
					buf.b += String.fromCodePoint(12);
					break;
				case 110:
					buf.b += String.fromCodePoint(10);
					break;
				case 114:
					buf.b += String.fromCodePoint(13);
					break;
				case 116:
					buf.b += String.fromCodePoint(9);
					break;
				case 117:
					let uc = Std.parseInt("0x" + HxOverrides.substr(this.str,this.pos,4));
					this.pos += 4;
					if(prev != -1) {
						if(uc < 56320 || uc > 57343) {
							buf.b += String.fromCodePoint(65533);
							prev = -1;
						} else {
							buf.b += String.fromCodePoint(((prev - 55296 << 10) + (uc - 56320) + 65536));
							prev = -1;
						}
					} else if(uc >= 55296 && uc <= 56319) {
						prev = uc;
					} else {
						buf.b += String.fromCodePoint(uc);
					}
					break;
				default:
					throw haxe_Exception.thrown("Invalid escape sequence \\" + String.fromCodePoint(c) + " at position " + (this.pos - 1));
				}
				start = this.pos;
			} else if(c != c) {
				throw haxe_Exception.thrown("Unclosed string");
			}
		}
		if(prev != -1) {
			buf.b += String.fromCodePoint(65533);
			prev = -1;
		}
		if(buf == null) {
			return HxOverrides.substr(this.str,start,this.pos - start - 1);
		} else {
			let s = this.str;
			let len = this.pos - start - 1;
			buf.b += len == null ? HxOverrides.substr(s,start,null) : HxOverrides.substr(s,start,len);
			return buf.b;
		}
	}
	invalidChar() {
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.str.charCodeAt(this.pos) + " at position " + this.pos);
	}
	invalidNumber(start) {
		throw haxe_Exception.thrown("Invalid number at position " + start + ": " + HxOverrides.substr(this.str,start,this.pos - start));
	}
}
haxe_format_JsonParser.__name__ = true;
Object.assign(haxe_format_JsonParser.prototype, {
	__class__: haxe_format_JsonParser
	,str: null
	,pos: null
});
class haxe_format_JsonPrinter {
	constructor(replacer,space) {
		this.replacer = replacer;
		this.indent = space;
		this.pretty = space != null;
		this.nind = 0;
		this.buf = new StringBuf();
	}
	write(k,v) {
		if(this.replacer != null) {
			v = this.replacer(k,v);
		}
		let _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "null";
			break;
		case 1:
			this.buf.b += Std.string(v);
			break;
		case 2:
			let v1 = isFinite(v) ? Std.string(v) : "null";
			this.buf.b += Std.string(v1);
			break;
		case 3:
			this.buf.b += Std.string(v);
			break;
		case 4:
			this.fieldsString(v,Reflect.fields(v));
			break;
		case 5:
			this.buf.b += "\"<fun>\"";
			break;
		case 6:
			let c = _g.c;
			if(c == String) {
				this.quote(v);
			} else if(c == Array) {
				let v1 = v;
				this.buf.b += String.fromCodePoint(91);
				let len = v1.length;
				let last = len - 1;
				let _g = 0;
				let _g1 = len;
				while(_g < _g1) {
					let i = _g++;
					if(i > 0) {
						this.buf.b += String.fromCodePoint(44);
					} else {
						this.nind++;
					}
					if(this.pretty) {
						this.buf.b += String.fromCodePoint(10);
					}
					if(this.pretty) {
						this.buf.b += Std.string(StringTools.lpad("",this.indent,this.nind * this.indent.length));
					}
					this.write(i,v1[i]);
					if(i == last) {
						this.nind--;
						if(this.pretty) {
							this.buf.b += String.fromCodePoint(10);
						}
						if(this.pretty) {
							this.buf.b += Std.string(StringTools.lpad("",this.indent,this.nind * this.indent.length));
						}
					}
				}
				this.buf.b += String.fromCodePoint(93);
			} else if(c == haxe_ds_StringMap) {
				let v1 = v;
				let o = { };
				let k = haxe_ds_StringMap.keysIterator(v1.h);
				while(k.hasNext()) {
					let k1 = k.next();
					o[k1] = v1.h[k1];
				}
				let v2 = o;
				this.fieldsString(v2,Reflect.fields(v2));
			} else if(c == Date) {
				let v1 = v;
				this.quote(HxOverrides.dateStr(v1));
			} else {
				this.classString(v);
			}
			break;
		case 7:
			let i = v._hx_index;
			this.buf.b += Std.string(i);
			break;
		case 8:
			this.buf.b += "\"???\"";
			break;
		}
	}
	classString(v) {
		this.fieldsString(v,Type.getInstanceFields(js_Boot.getClass(v)));
	}
	fieldsString(v,fields) {
		this.buf.b += String.fromCodePoint(123);
		let len = fields.length;
		let last = len - 1;
		let first = true;
		let _g = 0;
		let _g1 = len;
		while(_g < _g1) {
			let i = _g++;
			let f = fields[i];
			let value = Reflect.field(v,f);
			if(Reflect.isFunction(value)) {
				continue;
			}
			if(first) {
				this.nind++;
				first = false;
			} else {
				this.buf.b += String.fromCodePoint(44);
			}
			if(this.pretty) {
				this.buf.b += String.fromCodePoint(10);
			}
			if(this.pretty) {
				this.buf.b += Std.string(StringTools.lpad("",this.indent,this.nind * this.indent.length));
			}
			this.quote(f);
			this.buf.b += String.fromCodePoint(58);
			if(this.pretty) {
				this.buf.b += String.fromCodePoint(32);
			}
			this.write(f,value);
			if(i == last) {
				this.nind--;
				if(this.pretty) {
					this.buf.b += String.fromCodePoint(10);
				}
				if(this.pretty) {
					this.buf.b += Std.string(StringTools.lpad("",this.indent,this.nind * this.indent.length));
				}
			}
		}
		this.buf.b += String.fromCodePoint(125);
	}
	quote(s) {
		this.buf.b += String.fromCodePoint(34);
		let i = 0;
		while(true) {
			let c = s.charCodeAt(i++);
			if(c != c) {
				break;
			}
			switch(c) {
			case 8:
				this.buf.b += "\\b";
				break;
			case 9:
				this.buf.b += "\\t";
				break;
			case 10:
				this.buf.b += "\\n";
				break;
			case 12:
				this.buf.b += "\\f";
				break;
			case 13:
				this.buf.b += "\\r";
				break;
			case 34:
				this.buf.b += "\\\"";
				break;
			case 92:
				this.buf.b += "\\\\";
				break;
			default:
				this.buf.b += String.fromCodePoint(c);
			}
		}
		this.buf.b += String.fromCodePoint(34);
	}
	static print(o,replacer,space) {
		let printer = new haxe_format_JsonPrinter(replacer,space);
		printer.write("",o);
		return printer.buf.b;
	}
}
haxe_format_JsonPrinter.__name__ = true;
Object.assign(haxe_format_JsonPrinter.prototype, {
	__class__: haxe_format_JsonPrinter
	,buf: null
	,replacer: null
	,indent: null
	,pretty: null
	,nind: null
});
class haxe_io_Bytes {
	constructor(data) {
		this.length = data.byteLength;
		this.b = new Uint8Array(data);
		this.b.bufferValue = data;
		data.hxBytes = this;
		data.bytes = this.b;
	}
	blit(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	sub(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	getString(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		let s = "";
		let b = this.b;
		let i = pos;
		let max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			while(i < max) {
				let c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					let code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					let c2 = b[i++];
					let code = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else {
					let c2 = b[i++];
					let c3 = b[i++];
					let u = (c & 15) << 18 | (c2 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				let c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	toString() {
		return this.getString(0,this.length);
	}
	static ofString(s,encoding) {
		if(encoding == haxe_io_Encoding.RawNative) {
			let buf = new Uint8Array(s.length << 1);
			let _g = 0;
			let _g1 = s.length;
			while(_g < _g1) {
				let i = _g++;
				let c = s.charCodeAt(i);
				buf[i << 1] = c & 255;
				buf[i << 1 | 1] = c >> 8;
			}
			return new haxe_io_Bytes(buf.buffer);
		}
		let a = [];
		let i = 0;
		while(i < s.length) {
			let c = s.charCodeAt(i++);
			if(55296 <= c && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
			}
			if(c <= 127) {
				a.push(c);
			} else if(c <= 2047) {
				a.push(192 | c >> 6);
				a.push(128 | c & 63);
			} else if(c <= 65535) {
				a.push(224 | c >> 12);
				a.push(128 | c >> 6 & 63);
				a.push(128 | c & 63);
			} else {
				a.push(240 | c >> 18);
				a.push(128 | c >> 12 & 63);
				a.push(128 | c >> 6 & 63);
				a.push(128 | c & 63);
			}
		}
		return new haxe_io_Bytes(new Uint8Array(a).buffer);
	}
}
haxe_io_Bytes.__name__ = true;
Object.assign(haxe_io_Bytes.prototype, {
	__class__: haxe_io_Bytes
	,length: null
	,b: null
});
class haxe_io_BytesBuffer {
	constructor() {
		this.pos = 0;
		this.size = 0;
	}
	addByte(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	grow(delta) {
		let req = this.pos + delta;
		let nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		let nbuf = new ArrayBuffer(nsize);
		let nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	getBytes() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		let b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
}
haxe_io_BytesBuffer.__name__ = true;
Object.assign(haxe_io_BytesBuffer.prototype, {
	__class__: haxe_io_BytesBuffer
	,buffer: null
	,view: null
	,u8: null
	,pos: null
	,size: null
});
class haxe_io_BytesInput extends haxe_io_Input {
	constructor(b,pos,len) {
		super();
		if(pos == null) {
			pos = 0;
		}
		if(len == null) {
			len = b.length - pos;
		}
		if(pos < 0 || len < 0 || pos + len > b.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		this.b = b.b;
		this.pos = pos;
		this.len = len;
		this.totlen = len;
	}
	set_position(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	readByte() {
		if(this.len == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	readBytes(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		let b1 = this.b;
		let b2 = buf.b;
		let _g = 0;
		let _g1 = len;
		while(_g < _g1) {
			let i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
}
haxe_io_BytesInput.__name__ = true;
haxe_io_BytesInput.__super__ = haxe_io_Input;
Object.assign(haxe_io_BytesInput.prototype, {
	__class__: haxe_io_BytesInput
	,b: null
	,pos: null
	,len: null
	,totlen: null
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
class haxe_io_Eof {
	constructor() {
	}
	toString() {
		return "Eof";
	}
}
haxe_io_Eof.__name__ = true;
Object.assign(haxe_io_Eof.prototype, {
	__class__: haxe_io_Eof
});
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = true;
Object.assign(haxe_iterators_ArrayIterator.prototype, {
	__class__: haxe_iterators_ArrayIterator
	,array: null
	,current: null
});
class js_Boot {
	static getClass(o) {
		if(o == null) {
			return null;
		} else if(((o) instanceof Array)) {
			return Array;
		} else {
			let cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			let name = js_Boot.__nativeClassName(o);
			if(name != null) {
				return js_Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__];
				let n = e.__constructs__[o._hx_index];
				let con = e[n];
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						let _g = [];
						{
							let _g1 = 0;
							let _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								let p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js_Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __nativeClassName(o) {
		let name = js_Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
js_Boot.__name__ = true;
var js_Ip = require("ip");
var js_node_ChildProcess = require("child_process");
var js_node_Fs = require("fs");
var js_node_Net = require("net");
var js_node_Path = require("path");
class js_node_buffer__$Buffer_Helper {
	static bytesOfBuffer(b) {
		let o = Object.create(haxe_io_Bytes.prototype);
		o.length = b.byteLength;
		o.b = b;
		b.bufferValue = b;
		b.hxBytes = o;
		b.bytes = b;
		return o;
	}
}
js_node_buffer__$Buffer_Helper.__name__ = true;
var js_node_net_Socket = require("net").Socket;
var js_node_util_Promisify = require("util").promisify;
class sys_FileSystem {
	static exists(path) {
		try {
			js_node_Fs.accessSync(path);
			return true;
		} catch( _g ) {
			return false;
		}
	}
}
sys_FileSystem.__name__ = true;
class tink_await_Error {
	static fromAny(any) {
		if(((any) instanceof tink_core_TypedError)) {
			return any;
		} else {
			return tink_core_TypedError.withData(0,"Unexpected Error",any,{ fileName : "tink/await/Error.hx", lineNumber : 12, className : "tink.await._Error.Error_Impl_", methodName : "fromAny"});
		}
	}
}
class tink_await_OutcomeTools {
	static getOutcome(outcome,value) {
		if(outcome == null) {
			return tink_core_Outcome.Success(value);
		} else {
			switch(outcome._hx_index) {
			case 0:
				return outcome;
			case 1:
				let _g = outcome.failure;
				if(((_g) instanceof tink_core_TypedError)) {
					return outcome;
				} else {
					return tink_core_Outcome.Failure(tink_await_Error.fromAny(_g));
				}
				break;
			}
		}
	}
}
tink_await_OutcomeTools.__name__ = true;
class tink_core_Callback {
	static invoke(this1,data) {
		if(tink_core_Callback.depth < 500) {
			tink_core_Callback.depth++;
			this1(data);
			tink_core_Callback.depth--;
		} else {
			let _e = this1;
			let _g = function(data) {
				tink_core_Callback.invoke(_e,data);
			};
			let data1 = data;
			tink_core_Callback.defer(function() {
				_g(data1);
			});
		}
	}
	static defer(f) {
		process.nextTick(f);
	}
}
class tink_core__$Callback_ListCell {
	constructor(cb,list) {
		if(cb == null) {
			throw haxe_Exception.thrown("callback expected but null received");
		}
		this.cb = cb;
		this.list = list;
	}
	cancel() {
		if(this.list != null) {
			let list = this.list;
			this.cb = null;
			this.list = null;
			if(--list.used <= list.cells.length >> 1) {
				list.compact();
			}
		}
	}
}
tink_core__$Callback_ListCell.__name__ = true;
Object.assign(tink_core__$Callback_ListCell.prototype, {
	__class__: tink_core__$Callback_ListCell
	,cb: null
	,list: null
});
class tink_core_CallbackList {
	constructor() {
		this.busy = false;
		this.queue = [];
		this.used = 0;
		this.cells = [];
	}
	ondrain() {
	}
	onfill() {
	}
	invoke(data,destructive) {
		if(this.busy) {
			let _g = $bind(this,this.invoke);
			let data1 = data;
			let destructive1 = destructive;
			let tmp = function() {
				_g(data1,destructive1);
			};
			this.queue.push(tmp);
		} else {
			this.busy = true;
			let length = this.cells.length;
			let _g = 0;
			while(_g < length) {
				let i = _g++;
				let _this = this.cells[i];
				if(_this.list != null) {
					tink_core_Callback.invoke(_this.cb,data);
				}
			}
			this.busy = false;
			if(destructive) {
				let added = this.cells.length - length;
				let _g = 0;
				while(_g < length) {
					let i = _g++;
					let _this = this.cells[i];
					_this.cb = null;
					_this.list = null;
				}
				let _g1 = 0;
				while(_g1 < added) {
					let i = _g1++;
					this.cells[i] = this.cells[length + i];
				}
				this.resize(added);
			} else if(this.used < this.cells.length) {
				this.compact();
			}
			if(this.queue.length > 0) {
				(this.queue.shift())();
			}
		}
	}
	compact() {
		if(this.busy) {
			return;
		} else if(this.used == 0) {
			this.resize(0);
			this.ondrain();
		} else {
			let compacted = 0;
			let _g = 0;
			let _g1 = this.cells.length;
			while(_g < _g1) {
				let i = _g++;
				let _g1 = this.cells[i];
				if(_g1.cb != null) {
					if(compacted != i) {
						this.cells[compacted] = _g1;
					}
					if(++compacted == this.used) {
						break;
					}
				}
			}
			this.resize(this.used);
		}
	}
	resize(length) {
		this.cells.length = length;
	}
}
tink_core_CallbackList.__name__ = true;
Object.assign(tink_core_CallbackList.prototype, {
	__class__: tink_core_CallbackList
	,cells: null
	,used: null
	,queue: null
	,busy: null
});
class tink_core_TypedError {
	constructor(code,message,pos) {
		if(code == null) {
			code = 500;
		}
		this.code = code;
		this.message = message;
		this.pos = pos;
		this.exceptionStack = [];
		this.callStack = [];
	}
	printPos() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	toString() {
		let ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	static withData(code,message,data,pos) {
		return tink_core_TypedError.typed(code,message,data,pos);
	}
	static typed(code,message,data,pos) {
		let ret = new tink_core_TypedError(code,message,pos);
		ret.data = data;
		return ret;
	}
}
tink_core_TypedError.__name__ = true;
Object.assign(tink_core_TypedError.prototype, {
	__class__: tink_core_TypedError
	,message: null
	,code: null
	,data: null
	,pos: null
	,callStack: null
	,exceptionStack: null
});
class tink_core_Future {
	static ofJsPromise(promise) {
		return tink_core_Future.async(function(cb) {
			promise.then(function(a) {
				cb(tink_core_Outcome.Success(a));
			}).catch(function(e) {
				cb(tink_core_Outcome.Failure(tink_core_TypedError.withData(null,e.message,e,{ fileName : "tink/core/Future.hx", lineNumber : 89, className : "tink.core._Future.Future_Impl_", methodName : "ofJsPromise"})));
			});
		});
	}
	static async(f,lazy) {
		if(lazy == null) {
			lazy = false;
		}
		if(lazy) {
			return new tink_core__$Future_SuspendableFuture(function($yield) {
				f($yield);
				return null;
			});
		} else {
			let op = new tink_core_FutureTrigger();
			let wrapped = f;
			tink_core_Callback.invoke(wrapped,$bind(op,op.trigger));
			return op;
		}
	}
}
class tink_core_FutureTrigger {
	constructor() {
		this.list = new tink_core_CallbackList();
	}
	handle(callback) {
		let _g = this.list;
		if(_g == null) {
			tink_core_Callback.invoke(callback,this.result);
			return null;
		} else {
			let node = new tink_core__$Callback_ListCell(callback,_g);
			_g.cells.push(node);
			if(_g.used++ == 0) {
				_g.onfill();
			}
			return node;
		}
	}
	trigger(result) {
		if(this.list == null) {
			return false;
		} else {
			let list = this.list;
			this.list = null;
			this.result = result;
			list.invoke(result,true);
			return true;
		}
	}
}
tink_core_FutureTrigger.__name__ = true;
Object.assign(tink_core_FutureTrigger.prototype, {
	__class__: tink_core_FutureTrigger
	,result: null
	,list: null
});
class tink_core__$Future_SuspendableFuture {
	constructor(wakeup) {
		this.suspended = true;
		let _gthis = this;
		this.wakeup = wakeup;
		this.callbacks = new tink_core_CallbackList();
		this.callbacks.ondrain = function() {
			if(_gthis.callbacks != null) {
				_gthis.suspended = true;
				let this1 = _gthis.link;
				if(this1 != null) {
					this1.cancel();
				}
				_gthis.link = null;
			}
		};
	}
	trigger(value) {
		let _g = this.callbacks;
		if(_g != null) {
			this.callbacks = null;
			this.suspended = false;
			this.result = value;
			this.link = null;
			this.wakeup = null;
			_g.invoke(value,true);
		}
	}
	handle(callback) {
		if(this.callbacks == null) {
			tink_core_Callback.invoke(callback,this.result);
			return null;
		} else {
			let _this = this.callbacks;
			let node = new tink_core__$Callback_ListCell(callback,_this);
			_this.cells.push(node);
			if(_this.used++ == 0) {
				_this.onfill();
			}
			let ret = node;
			if(this.suspended) {
				this.suspended = false;
				this.link = this.wakeup($bind(this,this.trigger));
			}
			return ret;
		}
	}
}
tink_core__$Future_SuspendableFuture.__name__ = true;
Object.assign(tink_core__$Future_SuspendableFuture.prototype, {
	__class__: tink_core__$Future_SuspendableFuture
	,callbacks: null
	,result: null
	,suspended: null
	,link: null
	,wakeup: null
});
var tink_core_Outcome = $hxEnums["tink.core.Outcome"] = { __ename__ : true, __constructs__ : ["Success","Failure"]
	,Success: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Failure: ($_=function(failure) { return {_hx_index:1,failure:failure,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["failure"],$_)
};
class tink_core_Promise {
	static ofSpecific(s) {
		return s;
	}
}
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
js_Boot.__toStr = ({ }).toString;
gmdebug_ComposedProtocolMessage._hx_skip_constructor = false;
gmdebug_Cross.FOLDER = "gmdebug";
gmdebug_Cross.INPUT = haxe_io_Path.join([gmdebug_Cross.FOLDER,"in.dat"]);
gmdebug_Cross.OUTPUT = haxe_io_Path.join([gmdebug_Cross.FOLDER,"out.dat"]);
gmdebug_Cross.READY = haxe_io_Path.join([gmdebug_Cross.FOLDER,"ready.dat"]);
gmdebug_Cross.DATA = "data";
gmdebug_dap_LuaDebugger.commMethod = gmdebug_CommMethod.Pipe;
gmdebug_dap_LuaDebugger.clients = [];
gmdebug_dap_LuaDebugger.clientFiles = [];
gmdebug_dap_LuaDebugger.dapMode = gmdebug_dap_DapMode.ATTACH;
gmdebug_dap_LuaDebugger.autoLaunch = false;
gmdebug_dap_LuaDebugger.mapClientName = new haxe_ds_IntMap();
gmdebug_dap_LuaDebugger.mapClientID = new haxe_ds_IntMap();
tink_core_Callback.depth = 0;
gmdebug_dap_Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=main.js.map